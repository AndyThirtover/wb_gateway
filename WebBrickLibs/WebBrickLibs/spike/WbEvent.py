# $Id: WbEvent.py 2612 2008-08-11 20:08:49Z graham.klyne $
#
#  Lawrence Klyne
#
#
import logging

from MiscLib.DomHelpers import getAttrText, getElemText, getNamedElem

# Generic event type
#
#
class WbEvent:
    """
    Generic webbrick Gateway event contains type, source
    """

    def __init__(self, type = None, source = None):
        self._type = type
        self._source = source

    """
    This is a template for an event generated by any source in the Gateway
    """
    def type(self):
        """
            returns a string URI that identifies the event type.
            The event type will define what parameters are associated with this event.
        """
        return self._type

    def source(self):
        """
            returns a string URI that identifies the event source
        """
        return self._source

    def other_data(self):
        return None

    def __str__(self):
        return "%s %s " % ( self._type, self._source)

class WbEventOther(WbEvent):
    """
    Generic webbrick Gateway event contains type, source
    """

    def __init__(self, type = None, source = None, params=None):
        WbEvent.__init__(self,type,source)
        self._other_data = params

    def other_data(self):
        """
            returns an arbitray object that is other data for this event.
        """
        return self._other_data

    def __str__(self):
        return "%s %s %s" % ( self._type, self._source, self._other_data)

class WbEventFromXml(WbEventOther):
    """
    Generic webbrick Gateway event contains type, source
    """

    def __init__(self, xml ):
        WbEventOther.__init__(self)
        # read eventype
        # read event source
        # read parameters
        self._type = getAttrText( xml, 'type' )
        self._source = getAttrText( xml, 'source' )
        self._other_data = None
        if xml.childNodes:
            self._other_data = dict()
            # There are parameters.
            for param in xml.childNodes:
                if param.nodeType == param.ELEMENT_NODE:
                    # for each element in param create param entry
                    self._other_data[param.tagName] = getElemText(param)
            #for param in xml.childNodes:

    def other_data(self):
        """
            returns an arbitray object that is other data for this event.
        """
        return self._other_data

    def __str__(self):
        return "%s %s %s" % ( self._type, self._source, self._other_data)

#
# A template event handler for inbound webbrick packets
# This is just a place holder, the event parameter will implement the WbEvent class that follows this.
#
class WbEventTarget:
    """
    An event consumer should implement the handle Event method and this will be called
    with new events that are required.
    """
    def handleEvent( self, event ):
        return

class WbEventMatch:
    """
    test this against an event and decide on whether it passes or not.
    """
    def __init__( self, typ = "", src = "", par = None ):
        self._type = typ
        self._source = src
        self._params = par
        if self._params and len(self._params) == 0:
            self._params = None

    def type(self):
        """
            returns a string URI that identifies the event type.
            The event type will define what parameters are associated with this event.
        """
        return self._type

    def source(self):
        """
            returns a string URI that identifies the event source
        """
        return self._source

    def configure( self, xml ):
        # read eventype
        # read event source
        # read parameters
        self._type = getAttrText( xml, 'type' )
        self._source = getAttrText( xml, 'source' )
        self._params = None
        paramElem = getNamedElem(xml, "params")
        if paramElem and paramElem.childNodes:
            self._params = dict()
            # There are parameters.
            for param in paramElem.childNodes:
                if param.nodeType == param.ELEMENT_NODE:
                    isList = getAttrText(param, "type") == "list"
                    txt = getElemText(param)
                    # for each element in param create param entry
                    if isList:
                        self._params[param.tagName] = txt.split(',')
                    else:
                        self._params[param.tagName] = txt
            if len(self._params) == 0:
                self._params = None

    def test( self, inEvent ):
        """
        called with an XmlDom that contains the configuration for self
        """
#        logging.debug( "%s %s %s" % (self._type, self._source, self._params) )
#        logging.debug( "%s" % inEvent )

        isMatched = ( ( self._type == "" ) or ( self._type == inEvent.type() ) ) \
            and ( ( self._source == "" ) or ( self._source == inEvent.source() ) )

        if isMatched and ( self._params ):
            # need to check other_data as well
#            logging.debug( "%s" % self._params )
#            logging.debug( "%s" % inEvent.other_data() )
            if inEvent.other_data():
                for p in self._params:
#                    logging.debug( "%s" % p )
                    # if all paramaters match the inEvent parameters
                    if inEvent.other_data().has_key(p):
                        toMatch = self._params[p]
                        if isinstance( toMatch, list ):
                            isMatched = unicode(inEvent.other_data()[p]) in toMatch
                        else:
                            isMatched = unicode(inEvent.other_data()[p]) == unicode(toMatch)
                    else:
                        isMatched = False
                    if not isMatched:
                        break # skip rest of loop, mismatch
            else:
                isMatched = False # cannot do match against other_data

#        logging.debug( "%s" % isMatched )
        return isMatched
